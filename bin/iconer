#!/bin/bash


function scriptpath {
    target=$1
    cd `dirname ${target}`
    target=`basename ${target}`

    while [ -L "${target}" ]
    do
        target=`readlink ${target}`
        cd `dirname ${target}`
        target=`basename ${target}`
    done

    root=`pwd -P`
    result="${root}/$target"
    echo "${result}"
}


version="0.4.2"
debug=true


directory=$(dirname $([ -L $0 ] && scriptpath $0 || echo $0))


resources="${directory}/../resources"

platforms=("ios" "watchos" "macos")
files=()
background="black"
info=false
target_dir=false
mask=false
artwork=false
xcode=false

###############################################################################
#   Log info
###############################################################################

function info {
    if $info; then
        echo -e $1
    fi
}

###############################################################################
#   Image file validations
###############################################################################

function hasAlpha {
    #0 = true || 1 = false
    if [ $# -ne 1 ] || [ ! -f "$1" ]; then
        return 1
    fi
    output="$(sips -g hasAlpha "$1")"

    if [[ $output == *"yes"* ]] ; then
        return 0
    fi
    return 1
}

function hasValidSize {
    #0 = true || 1 = false
    if [ $# -ne 1 ] || [ ! -f "$1" ]; then
        return 1
    fi

    width="$(sips -g pixelWidth "$1"|grep pixelWidth)"
    height="$(sips -g pixelHeight "$1"|grep pixelHeight)"

    if [[ "$width" == *"1024"* ]] && [[ "$height" == *"1024"* ]]; then
        return 0
    fi
    return 1
}



###############################################################################
#   Set parameters
###############################################################################



if [ $# -lt 1 ]; then
    echo "iconer v${version} - App icon generator for Apple platforms"
    exit
fi

while [[ $# > 0 ]]
do
    key="$1"

    case $key in
        -h|--help)
            man iconer
            exit
        ;;
        -v|--version)
            echo "iconer v${version} - App icon generator for Apple platforms"
            exit
        ;;
        -i|--info)
            info=true
        ;;
        -a|--artwork)
            artwork=true
        ;;
        -x|--xcode)
            xcode=true
        ;;
        -p|--platform)
            case "$2" in
            ios|macos|watchos)
                platforms=("$2")
            ;;
            *)
                echo "Error: invalid platform! (avilable: ios, macos, watchos)"
                exit
            ;;
            esac
            shift
        ;;
        -t|--target)
            target_dir="$2"
            shift
        ;;
        -b|--background)
            background="$2"
        ;;
        -m|--mask)
            mask=true
        ;;
        *)
            if [ -f "$key" ]; then
                files+=("$key")
            fi
        ;;
    esac
    shift
done

if $xcode && [ "${#platforms[@]}" -gt 1 ]; then
    echo "Please support exactly one platform (ios, macos, watchos) if you want to use the -x, --xcode flag."
    exit
fi

###############################################################################
#   Do the thing!
###############################################################################

if [ ${#files[@]} -eq 0 ]; then
    echo "No valid files are provided."
    exit
fi

count=0

for file in ${files[@]}; do
    if ! hasValidSize "${file}"; then
        info "\033[1mWarning:\033[0m the image size should be exactly 1024x1024 pixels."
    fi

    path=$(dirname "$file")
    base=$(basename "$file")
    name=`rev <<< "$base" | cut -d"." -f2- | rev`
    ext=`rev <<< "$base" | cut -d"." -f1 | rev`

    work_dir="${path}"

    if [ -d "$target_dir" ]; then
        work_dir="${target_dir%/}"
    else
        info "\033[1mWarning:\033[0m the target directory is not avialable."
    fi

    if ! $xcode; then
        work_dir="${work_dir}/${name}-iconer"
    fi

    mkdir -p "${work_dir}"

    source_file="${work_dir}/iTunesArtwork"

    sips -Z 1024 "${file}" --out "${source_file}" >/dev/null 2>&1

    if hasAlpha "$file"; then
        info "\033[1mWarning:\033[0m file ($file) has alpha channels..."

        if command -v convert >/dev/null 2>&1 ; then
            #convert "${source_file}" -background "${background}" -alpha remove -alpha off -set colorspace RGB -separate "${source_file}.jpg"
            convert "${source_file}" -background "${background}" -alpha remove -alpha off "${source_file}.jpg"
            sips -s format png "${source_file}.jpg" --out "${source_file}" >/dev/null 2>&1
            rm "${source_file}.jpg"
            info "Removing alpha channels... (Use -b, --background to use custom background color)"
        else
            info "You can not submit to the App Store if your icons contains alpha channels."
            info "To auto-remove alpha channel run 'brew install imagemagick' first."
        fi
    fi

    for platform in ${platforms[@]}; do
        if $xcode; then
            p_dir="${work_dir}/Assets.xcassets/AppIcon.appiconset"
        else
            p_dir="${work_dir}/${platform}.xcassets/${name}.appiconset"
        fi

        mkdir -p "${p_dir}"
        find "${p_dir}" -name "*.png" -mindepth 1 -exec rm -r {} \;

        contents=$(cat ${resources}/${platform}.json)
        contents=$(sed "s/\${name}/${name}/g" <<< "${contents}")
        echo -e "${contents}" > "${p_dir}/Contents.json"

        case "$platform" in
        "ios")
            for size in 20 29 40 58 60 76 80 87 120 152 167 180 1024; do
                sips -Z "${size}" "${source_file}" --out "${p_dir}/${name}-${size}.${ext}" >/dev/null 2>&1
                count=$((count+1))
            done
        ;;
        "watchos")
            for size in 48 55 58 87 80 172 196 1024; do
                sips -Z "${size}" "${source_file}" --out "${p_dir}/${name}-${size}.${ext}" >/dev/null 2>&1

                if $mask && command -v composite >/dev/null 2>&1 ; then
                    mask_file="${p_dir}/Mask-${size}.png"
                    icon_file="${p_dir}/$name-${size}.${ext}"

                    sips -Z "${size}" "${resources}/Mask.png" --out "${mask_file}" >/dev/null 2>&1
                    composite -alpha on "${icon_file}" "${mask_file}" "${mask_file}" "${icon_file}"
                    rm "${mask_file}"
                else
                    info "To mask watchOS images run 'brew install imagemagick' first."
                fi

                count=$((count+1))
            done
        ;;
        "macos")
            for size in 16 32 64 128 256 512 1024; do
                sips -Z "$size" "$source_file" --out "${p_dir}/$name-$size.$ext" >/dev/null 2>&1
                count=$((count+1))
            done
        ;;
        esac
    done

    if ! $artwork; then
        rm "${source_file}"
    fi
done

info "$count icon files are generated."










