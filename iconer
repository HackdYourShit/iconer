#!/bin/bash


version="0.2.1"
debug=true

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"



function usage
{
    echo -e "--------------------------------------------------------------------------------"
    echo -e "  \033[34miconer\033[0m $version - App icon generator for Apple platforms."
    echo -e "--------------------------------------------------------------------------------"
    echo -e ""
    echo -e "   \033[1mBasic usage:\033[0m"
    echo -e "      iconer file1 file2 fileN"
    echo -e "      iconer [-h, --help]"
    echo -e ""
    echo -e ""
    echo -e "   \033[1mDisplay conversion info:\033[0m"
    echo -e "      iconer file1 [-i, --info]"
    echo -e ""
    echo -e ""
    echo -e "   \033[1mTarget directory:\033[0m"
    echo -e "      iconer file1 [-t, --target] <directory>"
    echo -e ""
    echo -e ""
    echo -e "   \033[1mGenerate assets:\033[0m"
    echo -e "      iconer file1 [-a, --assets]"
    echo -e ""
    echo -e ""
    echo -e "   \033[1mPlatform options:\033[0m"
    echo -e "      iconer file1 [-p, --platform] <platform>"
    echo -e ""
    echo -e "     \033[4mvalues:\033[0m"
    echo -e "       ios - Icons for iOS devices"
    echo -e "       osx - Icons for OS X devices"
    echo -e "       watchos - Icons for watchOS devices"
    echo -e ""
    echo -e ""
    echo -e "   \033[1mBackground options:\033[0m"
    echo -e "       iconer file1 [-b, --background] <color>"
    echo -e ""
    echo -e "     \033[4mcolor can be:\033[0m"
    echo -e "       name of the color (blue)"
    echo -e "       hexa color code (#cafe00)"
    echo -e "       rgb color code (rgb(255,255,255))"
    echo -e ""
}


# function log {
#     # FUNCNAME
#     # BASH_SOURCE
#     # BASH_LINENO
#     if [ $# -ne 1 ] ; then
#         echo "Illegal number of log parameters (line: $BASH_LINENO)"
#         return
#     fi
#     if [ "$debug" = true ] ; then
#         echo $1
#     fi
# }

# function log() {
#     echo "[$( caller )] $*" >&2
#     echo "BASH_SOURCE: ${BASH_SOURCE[*]}"
#     echo "BASH_LINENO: ${BASH_LINENO[*]}"
#     echo "FUNCNAME: ${FUNCNAME[*]}"
# }

# function foobar() {
#     log "failed:" "$@"
# }

# foobar "$@"

# echo "Welcome to Icon generator"
# echo "Version: ${version}"


# function console
# {
#     if [ $# -ne 1 ] ; then
#         echo "Illegal number of log parameters (line: $BASH_LINENO)"
#         return
#     fi

#     from=("b" "\/b" "blue" "\/blue")
#     into=("1" "0" "34" "0")

#     res=$1
#     for ((i=0;i<${#from[@]};i++)); do
#         f=${from[$i]}
#         t=${into[$i]}

#         # echo "$i: $f $t "

#         res=$(sed "s/\[${f}\]/\\\033\[${t}m/g" <<< "$res")
#     done

#     echo -e "$res"
# }


# console "[b]helloka[/b] valami [blue]kék színű[/blue] izé"

#function join { local IFS="$1"; shift; echo "$*"; }

# function join {
#     local d=$1
#     shift
#     echo -n "$1"
#     shift
#     printf "%s" "${@/#/$d}"
# }

###############################################################################
#   Log info
###############################################################################

function info {
    if $info; then
        echo -e $1
    fi
}

###############################################################################
#   Image file validations
###############################################################################

function hasAlpha {
    #0 = true || 1 = false
    if [ $# -ne 1 ] || [ ! -f "$1" ]; then
        return 1
    fi
    output="$(sips -g hasAlpha "$1")"

    if [[ $output == *"yes"* ]] ; then
        return 0
    fi
    return 1
}

function hasValidSize {
    #0 = true || 1 = false
    if [ $# -ne 1 ] || [ ! -f "$1" ]; then
        return 1
    fi

    width="$(sips -g pixelWidth "$1"|grep pixelWidth)"
    height="$(sips -g pixelHeight "$1"|grep pixelHeight)"

    if [[ "$width" == *"1024"* ]] && [[ "$height" == *"1024"* ]]; then
        return 0
    fi
    return 1
}



###############################################################################
#   Set parameters
###############################################################################

platforms=("ios" "watchos" "osx")
files=()
background="black"
info=false
target_dir=false
assets=false
mask=false

if [ $# -lt 1 ]; then
    usage
    exit
fi

while [[ $# > 0 ]]
do
    key="$1"

    case $key in
        -h|--help)
            usage
            exit
        ;;
        -p|--platform)
            case "$2" in
            ios|osx|watchos)
                platforms=("$2")
            ;;
            *)
                echo "Error: invalid platform! (avilable: ios, osx, watchos)"
                exit
            ;;
            esac
            shift
        ;;
        -t|--target)
            target_dir="$2"
            shift
        ;;
        -b|--background)
            background="$2"
        ;;
        -a|--assets)
            assets=true
        ;;
        -m|--mask)
            mask=true
        ;;
        -i|--info)
            info=true
        ;;
        *)
            if [ -f "$key" ]; then
                files+=("$key")
            fi
        ;;
    esac
    shift
done

###############################################################################
#   Do the thing!
###############################################################################

if [ ${#files[@]} -eq 0 ]; then
    echo "No valid files are provided."
    exit
fi

count=0

for file in ${files[@]}; do
    path=$(dirname "$file")
    base=$(basename "$file")
    name=`rev <<< "$base" | cut -d"." -f2- | rev`
    ext=`rev <<< "$base" | cut -d"." -f1 | rev`
    work_dir="$path/$name-iconer"

    if [ -d "$target_dir" ]; then
        work_dir="$target_dir"
    fi

    mkdir -p "$work_dir"

    source_file="$work_dir/iTunesArtwork"

    cp "$file" "$source_file"

    if ! hasValidSize "$file"; then
        info "\033[1mWarning:\033[0m the image size should be exactly 1024x1024 pixels."
    fi

    if hasAlpha "$file"; then
        info "\033[1mWarning:\033[0m file ($file) has alpha channels..."

        if command -v convert >/dev/null 2>&1 ; then
            convert "$source_file" -background "$background" -alpha remove -alpha off "$source_file"
            info "Removing alpha channels... (Use -b, --background to use custom background color)"
        else
            info "You can not submit to the App Store if your icons contains alpha channels."
            info "To auto-remove alpha channel run 'brew install imagemagick' first."
        fi
    fi


    ios=$(cat  << EOF
{
  "images": [
    {
      "size": "29x29",
      "idiom": "iphone",
      "filename": "${name}-58.png",
      "scale": "2x"
    },
    {
      "size": "29x29",
      "idiom": "iphone",
      "filename": "${name}-87.png",
      "scale": "3x"
    },
    {
      "size": "40x40",
      "idiom": "iphone",
      "filename": "${name}-80.png",
      "scale": "2x"
    },
    {
      "size": "40x40",
      "idiom": "iphone",
      "filename": "${name}-120.png",
      "scale": "3x"
    },
    {
      "size": "60x60",
      "idiom": "iphone",
      "filename": "${name}-120.png",
      "scale": "2x"
    },
    {
      "size": "60x60",
      "idiom": "iphone",
      "filename": "${name}-180.png",
      "scale": "3x"
    },
    {
      "size": "29x29",
      "idiom": "ipad",
      "filename": "${name}-29.png",
      "scale": "1x"
    },
    {
      "size": "29x29",
      "idiom": "ipad",
      "filename": "${name}-58.png",
      "scale": "2x"
    },
    {
      "size": "40x40",
      "idiom": "ipad",
      "filename": "${name}-40.png",
      "scale": "1x"
    },
    {
      "size": "40x40",
      "idiom": "ipad",
      "filename": "${name}-80.png",
      "scale": "2x"
    },
    {
      "size": "76x76",
      "idiom": "ipad",
      "filename": "${name}-76.png",
      "scale": "1x"
    },
    {
      "size": "76x76",
      "idiom": "ipad",
      "filename": "${name}-152.png",
      "scale": "2x"
    },
    {
      "idiom": "ipad",
      "size": "83.5x83.5",
      "filename": "${name}-167.png",
      "scale": "2x"
    }
  ],
  "info": {
    "version": 1,
    "author": "xcode"
  },
  "properties": {
    "pre-rendered": true
  }
}
EOF
)

watchos=$(cat  << EOF
{
  "images": [
    {
      "size": "24x24",
      "idiom": "watch",
      "filename": "${name}-48.png",
      "scale": "2x",
      "role": "notificationCenter",
      "subtype": "38mm"
    },
    {
      "size": "27.5x27.5",
      "idiom": "watch",
      "filename": "${name}-55.png",
      "scale": "2x",
      "role": "notificationCenter",
      "subtype": "42mm"
    },
    {
      "size": "29x29",
      "idiom": "watch",
      "filename": "${name}-58.png",
      "role": "companionSettings",
      "scale": "2x"
    },
    {
      "size": "29x29",
      "idiom": "watch",
      "filename": "${name}-87.png",
      "role": "companionSettings",
      "scale": "3x"
    },
    {
      "size": "40x40",
      "idiom": "watch",
      "filename": "${name}-80.png",
      "scale": "2x",
      "role": "appLauncher",
      "subtype": "38mm"
    },
    {
      "size": "86x86",
      "idiom": "watch",
      "filename": "${name}-172.png",
      "scale": "2x",
      "role": "quickLook",
      "subtype": "38mm"
    },
    {
      "size": "98x98",
      "idiom": "watch",
      "filename": "${name}-196.png",
      "scale": "2x",
      "role": "quickLook",
      "subtype": "42mm"
    }
  ],
  "info": {
    "version": 1,
    "author": "xcode"
  }
}
EOF
)

osx=$(cat  << EOF
{
  "images": [
    {
      "size": "16x16",
      "idiom": "mac",
      "filename": "${name}-16.png",
      "scale": "1x"
    },
    {
      "size": "16x16",
      "idiom": "mac",
      "filename": "${name}-32.png",
      "scale": "2x"
    },
    {
      "size": "32x32",
      "idiom": "mac",
      "filename": "${name}-32.png",
      "scale": "1x"
    },
    {
      "size": "32x32",
      "idiom": "mac",
      "filename": "${name}-64.png",
      "scale": "2x"
    },
    {
      "size": "128x128",
      "idiom": "mac",
      "filename": "${name}-128.png",
      "scale": "1x"
    },
    {
      "size": "128x128",
      "idiom": "mac",
      "filename": "${name}-256.png",
      "scale": "2x"
    },
    {
      "size": "256x256",
      "idiom": "mac",
      "filename": "${name}-256.png",
      "scale": "1x"
    },
    {
      "size": "256x256",
      "idiom": "mac",
      "filename": "${name}-512.png",
      "scale": "2x"
    },
    {
      "size": "512x512",
      "idiom": "mac",
      "filename": "${name}-512.png",
      "scale": "1x"
    },
    {
      "size": "512x512",
      "idiom": "mac",
      "filename": "${name}-1024.png",
      "scale": "2x"
    }
  ],
  "info": {
    "version": 1,
    "author": "xcode"
  }
}
EOF
)


    for platform in ${platforms[@]}; do
        platform_dir="$work_dir/$platform.xcassets/${name}.appiconset"
        mkdir -p "$platform_dir"

        # if $assets; then
        #     echo -e "assets"
        # else
        #     echo -e "icons"
        # fi


        case "$platform" in
        "ios")
            for size in 29 40 58 76 80 87 120 152 167 180; do
                sips -Z "$size" "$source_file" --out "$platform_dir/$name-$size.$ext" >/dev/null 2>&1
                count=$((count+1))
            done
            echo -e "$ios" > "$platform_dir/Contents.json"
        ;;
        "watchos")
            for size in 48 55 58 87 80 172 196; do
                sips -Z "$size" "$source_file" --out "$platform_dir/$name-$size.$ext" >/dev/null 2>&1

                if $mask && command -v composite >/dev/null 2>&1 ; then
                    sips -Z "$size" "$DIR/Mask.png" --out "$platform_dir/Mask-$size.png" >/dev/null 2>&1
                    composite -alpha on "$platform_dir/$name-$size.$ext" "$platform_dir/Mask-$size.png" "$platform_dir/Mask-$size.png" "$platform_dir/$name-$size.$ext"
                    rm "$platform_dir/Mask-$size.png"
                else
                    info "To mask watchOS images run 'brew install imagemagick' first."
                fi

                count=$((count+1))
            done
            echo -e "$watchos" > "$platform_dir/Contents.json"
        ;;
        "osx")
            for size in 16 32 64 128 256 512 1024; do
                sips -Z "$size" "$source_file" --out "$platform_dir/$name-$size.$ext" >/dev/null 2>&1
                count=$((count+1))
            done
            echo -e "$osx" > "$platform_dir/Contents.json"
        ;;
        esac
    done
done

info "$count icon files are generated."










